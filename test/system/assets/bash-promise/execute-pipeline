#!/usr/bin/env sh
set -eux

workflow_type="${KRATIX_WORKFLOW_TYPE}"
workflow_action="${KRATIX_WORKFLOW_ACTION}"

if [ "$workflow_type" = "resource" ]; then
  echo "resource/${workflow_action}: executing pipeline for resource"
  eval "$(yq .spec.container${CONTAINER_INDEX}Cmd /kratix/input/object.yaml)"
  exit 0
fi


echo "executing pipeline for promise"

unique_id=$(yq '.metadata.name' /kratix/input/object.yaml)

imperative_platform_namespace=${unique_id}-platform-imperative
declarative_worker_namespace=${unique_id}-worker-declarative-${VERSION:-"v1alpha1"}
declarative_platform_namespace=${unique_id}-platform-declarative

if [ "${workflow_action}" = "delete" ]; then
  echo "promise/delete: cleaning up"
  kubectl delete namespace ${imperative_platform_namespace} --ignore-not-found
  exit 0
fi

echo "promise/configure: creating namespace"

kubectl create namespace ${declarative_worker_namespace} --dry-run=client -oyaml > /kratix/output/namespace.yaml

if [ -f /kratix/output/static/dependencies.yaml ]; then
  echo "old kratix dependencies.yaml exists, modifying it"
  yq -i '.metadata.labels.modifydepsinpipeline = "yup"' /kratix/output/static/dependencies.yaml
fi

mkdir -p /kratix/output/platform/
kubectl create namespace ${declarative_platform_namespace} --dry-run=client -oyaml > /kratix/output/platform/namespace.yaml
cat <<EOF > /kratix/metadata/destination-selectors.yaml
- directory: platform
  matchLabels:
    environment: platform
- matchLabels:
    ${unique_id}: label
EOF

kubectl get namespace ${imperative_platform_namespace} || kubectl create namespace ${imperative_platform_namespace}

